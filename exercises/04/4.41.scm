(define (multiple-dwelling)
  (filter (lambda (others)
            (let ((smith-level (caddddr others))
                  (fletcher-level (caddr others))
                  (cooper-level (cadr others)))
              (and (not (= abs (- smith-level fletcher-level)) 1)
                   (not (= abs (- fletcher-level cooper-level)) 1))))
  (flatmap (lambda (others)
             (map (smith-level) (append others smith-level)))
    (filter (lambda (others)
              (let ((miller-level (cadddr others))
                    (cooper-level (cadr others)))
                (> miller-level cooper-level)))
      (flatmap (lambda (miller-level)
                 (map (lambda (others) (append others miller-level))
                      '(1 2 3 4 5)))
        (flatmap (lambda (fletcher-level)
                   (map (lambda (others) (append others fletcher-level))
                        '(2 3 4)))
          (flatmap (lambda (baker-level)
                 (map (lambda (cooper-level) (list baker-level cooper-level))
                      '(2 3 4 5))
            '(1 2 3 4)))))))))
